#include<iostream>
using namespace std;
class Node
{
	public:
		int data;
		Node* next;
	
	Node(int element)
	{
		this->data=element;
		next=NULL;
	}
		
};

class LinkedList
{
	public:
		
		Node* head=NULL;

	Node* CreateNode()
	{
		int data;
		cout<<"Enter the Data:";
		cin>>data;
		return new Node(data);
	}
	void insertAtBegging(){
		cout<<"Insert at beginning"<<endl;
		Node* newNode = CreateNode();
		newNode->next = head;
		head= newNode;
	}
	void Insertatlast()
	{
		cout<<"Insert At Last"<<endl;
		Node* newNode=CreateNode();
		Node* temp=head;
		if(head==NULL){
			newNode->next=head;
			head=newNode;
		}else{		
			while(temp->next!=NULL)
			{
				temp=temp->next;
			}
			temp->next=newNode;
		}
	}
	
	void displayLinkedList()
	{
		Node* temp=head;
		while(temp!=NULL)
		{
			cout<<temp->data<<"->";
			temp=temp->next;
		}
		cout<<"NULL"<<endl;
	}
	void InsertAtPosition()
	{
	
	    int i=1 , position;	
	    cout<<"Enter The Position:";
		cin>>position;
		if(position > LengthofLinkedlist()){
	    	cout<<"Invalid  position"<<endl;
		}else{
			
		
			Node* newNode=CreateNode();
		
			Node* temp=head;
			
		
			while(i<(position-1))
			{
				temp=temp->next;
				i++;
			}
			newNode->next=temp->next;
			temp->next=newNode;
		}
    }
			
	int LengthofLinkedlist()
	{
		int length=1;
		Node* temp=head;
		while(temp->next!=NULL)
		{
			length=length+1;
			temp=temp->next;
		}
		
		//cout<<"Length Of Linked List Is: "<<length<<endl;
		return length;
	}
	void Mid()
	{
		Node* temp=head ;
		Node* mid;
		while(temp!=NULL && temp->next != NULL){
			mid=temp;
			temp= temp->next->next;
			
		}
		cout<<"Mid Data is:"<<mid->data<<endl;
	}
	
	void DeleteatGivenPosn()
	{
		int posn  , i=1;
		
		cout<<"Enter the position of the element to be deleted:";
		cin>>posn;
		
		Node* current=head;
		Node* previous=current;

		if(posn==1)
		{
			current=current->next;
			head=current;
			delete previous;  
		}
		else{
		
			while(i<posn)
			{
				previous=current; //ant element
				current=current->next;
				i++;
			}
			previous->next=current->next;
			
			delete current;
		}
			
	
	}
	void additionofnodes()
		{
			Node* temp=head;
			int result=0;
			while(temp!=NULL)
			{
				result=result+temp->data;
				temp=temp->next;
			}
			cout<<"Addition is :"<<result<<endl;;
		}
		void multiplicationofnodes()
		{
			Node* temp=head;
			int result=1;
			while(temp!=NULL)
			{
				result=result*temp->data;
				temp=temp->next;
			}
			cout<<"Multiplication is:"<<result<<endl;
		}
		
		void ReverseLinkedlist()
		{
			
			Node* current=head;
			Node* prev=NULL;
			Node* next=NULL;
			while(current!=NULL)
			{
				
				next=current->next;
				current->next=prev;
				prev=current;
				current=next;
				
			}
			head=prev;
			
		}
		
		void primenumber()
		{
			Node* temp=head;
			int i=2;
			bool flag=true;
			int save=0;
			while(temp!=NULL)
			{
//				if((temp->data)>1)
//				{
					
					while(i!=temp->data)
					{
							save=temp->data;
	
						
						  if (temp->data==2)
						{
							 flag=true;
							 break;
						}
						else if(temp->data==1)
						{
							flag=false;
							break;
						}
						
						 else if((temp->data)%i==0)
						{
							 flag=false;
							 break;	
						}
						
						else
						{
							 flag=true;	
						}
						i++;
						}
						
				if(flag==true)
				{
					cout<<"number-> "<<save<<"  is Prime"<<endl;
				}
				else 
				{
					cout<<"number-> "<<save  <<"  is  not prime"<<endl;
				}
				
				
			temp=temp->next;
	}

				}			
		//}
		
				 void checkArmstrongNumber()
				 {
				 	Node* temp=head;
				 	int remainder=0;
				 	int cube=0;
				 	
				 	while(temp!=NULL)
				 	{
				 		int tempnum=temp->data;
				 		//cout<<tempnum<<endl;
				 		while(temp->data>0)
				 		{
				 			
				 			remainder=(temp->data)%10;	
				 			cube=cube+remainder*remainder*remainder;
				 			temp->data=(temp->data)/10;
				 			
						 }
						int store=cube;
						 if(tempnum==store)
						 {
						 	cout<<tempnum <<" is  armstrong number"<<endl;
						 }
						 else
						 {
						 	cout<<tempnum <<" is not armstrong number"<<endl;
						 }
				 		temp=temp->next;
					 }
				 	
				 	
				  } 
	
	
 }; 
 int main()
 {
 	LinkedList linkedlist;
 	linkedlist.insertAtBegging();
	linkedlist.insertAtBegging();
	linkedlist.displayLinkedList();
 	

	linkedlist.Insertatlast();
	linkedlist.Insertatlast();
	linkedlist.displayLinkedList();
	
	//linkedlist.InsertAtPosition();
	linkedlist.displayLinkedList();
	linkedlist.Mid();
	linkedlist.primenumber();
	
	linkedlist.displayLinkedList();
	linkedlist.checkArmstrongNumber();
	
	
//	linkedlist.DeleteatGivenPosn();
//	linkedlist.displayLinkedList();
	
//	linkedlist.LengthofLinkedlist();
	
//	linkedlist.additionofnodes();
//	linkedlist.multiplicationofnodes();
	
//	linkedlist.ReverseLinkedlist();
//	linkedlist.displayLinkedList();


 	
 	
 }
